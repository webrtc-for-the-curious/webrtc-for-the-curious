<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduccón on WebRTC para los curiosos</title><link>https://webrtcforthecurious.com/es/</link><description>Recent content in Introduccón on WebRTC para los curiosos</description><generator>Hugo</generator><language>es</language><atom:link href="https://webrtcforthecurious.com/es/index.xml" rel="self" type="application/rss+xml"/><item><title>¿Qué, Por qué y Cómo?</title><link>https://webrtcforthecurious.com/es/docs/01-what-why-and-how/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/01-what-why-and-how/</guid><description>¿Qué, Por qué y Cómo? # ¿Qué es WebRTC? # WebRTC, es la abreviatura de Web Real-Time Communication, es una API como un Protocolo. El protocolo WebRTC es un conjunto de reglas para que dos Agentes WebRTC negocien una comunicación bidireccional segura en tiempo real. Mientras que la WebRTC API permite a los desarrolladores usar el protocolo WebRTC. La WebRTC API es solo para JavaScript.
Una relación similar sería entre HTTP y la Fetch API.</description></item><item><title>Señalización</title><link>https://webrtcforthecurious.com/es/docs/02-signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/02-signaling/</guid><description>Señalización # ¿Qué es la Señalización de WebRTC? # Cuando creas un agente WebRTC, no sabe nada sobre el otro par. ¡No tiene idea de con quién se va a conectar o qué van a enviar! La señalización es el proceso inicial de arranque que hace posible una llamada. Después de que estos valores se intercambian, los agentes WebRTC pueden comunicarse directamente entre sí.
Los mensajes de señalización son simplemente texto.</description></item><item><title>Conexión</title><link>https://webrtcforthecurious.com/es/docs/03-connecting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/03-connecting/</guid><description>Conexión # ¿Por qué WebRTC necesita un subsistema dedicado para conectarse? # La mayoría de las aplicaciones implementadas hoy en día establecen conexiones cliente/servidor. Una conexión cliente/servidor requiere que el servidor tenga una dirección de transporte estable y bien conocida. Un cliente contacta a un servidor, y el servidor responde.
WebRTC no usa un modelo cliente/servidor, establece conexiones peer-to-peer (P2P). En una conexión P2P, la tarea de crear una conexión se distribuye equitativamente entre ambos pares.</description></item><item><title>Seguridad</title><link>https://webrtcforthecurious.com/es/docs/04-securing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/04-securing/</guid><description>Seguridad # ¿Qué seguridad tiene WebRTC? # Cada conexión WebRTC está autenticada y cifrada. Puedes estar seguro de que un tercero no puede ver lo que estás enviando ni insertar mensajes falsos. También puedes estar seguro de que el Agente WebRTC que generó la Descripción de Sesión es con quien te estás comunicando.
Es muy importante que nadie manipule esos mensajes. Está bien si un tercero lee la Descripción de Sesión en tránsito.</description></item><item><title>Redes en Tiempo Real</title><link>https://webrtcforthecurious.com/es/docs/05-real-time-networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/05-real-time-networking/</guid><description>Redes en Tiempo Real # ¿Por qué las redes son tan importantes en la comunicación en tiempo real? # Las redes son el factor limitante en la comunicación en tiempo real. En un mundo ideal tendríamos ancho de banda ilimitado y los paquetes llegarían instantáneamente. Sin embargo, este no es el caso. Las redes son limitadas, y las condiciones pueden cambiar en cualquier momento. Medir y observar las condiciones de la red también es un problema difícil.</description></item><item><title>Comunicación de Medios</title><link>https://webrtcforthecurious.com/es/docs/06-media-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/06-media-communication/</guid><description>Comunicación de Medios # ¿Qué obtengo de la comunicación de medios de WebRTC? # WebRTC te permite enviar y recibir una cantidad ilimitada de flujos de audio y video. Puedes agregar y eliminar estos flujos en cualquier momento durante una llamada. Estos flujos podrían ser todos independientes, o podrían estar agrupados juntos. Podrías enviar una transmisión de video de tu escritorio, y luego incluir audio y video de tu cámara web.</description></item><item><title>Comunicación de Datos</title><link>https://webrtcforthecurious.com/es/docs/07-data-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/07-data-communication/</guid><description>Comunicación de Datos # ¿Qué obtengo de la comunicación de datos de WebRTC? # WebRTC proporciona canales de datos para la comunicación de datos. Entre dos pares puedes abrir 65,534 canales de datos. Un canal de datos está basado en datagramas, y cada uno tiene su propia configuración de durabilidad. Por defecto, cada canal de datos tiene entrega ordenada garantizada.
Si te acercas a WebRTC desde un trasfondo de medios, los canales de datos pueden parecer derro chadores.</description></item><item><title>WebRTC Aplicado</title><link>https://webrtcforthecurious.com/es/docs/08-applied-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/08-applied-webrtc/</guid><description>WebRTC Aplicado # Ahora que sabes cómo funciona WebRTC, ¡es hora de construir con él! Este capítulo explora qué están construyendo las personas con WebRTC y cómo lo están construyendo. Aprenderás todas las cosas interesantes que están sucediendo con WebRTC. El poder de WebRTC viene con un costo. Construir servicios WebRTC de grado producción es desafiante. Este capítulo intentará explicar esos desafíos antes de que los encuentres.
Por Caso de Uso # Muchos piensan que WebRTC es solo una tecnología para conferencias en el navegador web.</description></item><item><title>Depuración</title><link>https://webrtcforthecurious.com/es/docs/09-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/09-debugging/</guid><description>Depuración # Depurar WebRTC puede ser una tarea desalentadora. Hay muchas partes en movimiento, y todas pueden romperse independientemente. Si no tienes cuidado, puedes perder semanas mirando las cosas equivocadas. Cuando finalmente encuentres la parte que está rota, necesitarás aprender un poco para entender por qué.
Este capítulo te pondrá en la mentalidad para depurar WebRTC. Te mostrará cómo desglosar el problema. Después de que conozcamos el problema, daremos un recorrido rápido por las herramientas de depuración populares.</description></item><item><title>Historia</title><link>https://webrtcforthecurious.com/es/docs/10-history-of-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/10-history-of-webrtc/</guid><description>Historia # Al aprender WebRTC, los desarrolladores a menudo se sienten frustrados por la complejidad. Ven características de WebRTC irrelevantes para su proyecto actual y desean que WebRTC fuera más simple. El problema es que todos tienen un conjunto diferente de casos de uso. La comunicación en tiempo real tiene una historia rica con muchas personas diferentes construyendo muchas cosas diferentes.
Este capítulo contiene entrevistas con los autores de los protocolos que componen WebRTC.</description></item><item><title>FAQ</title><link>https://webrtcforthecurious.com/es/docs/11-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/11-faq/</guid><description>FAQ # ¿Por qué WebRTC usa UDP? La NAT Transversal requiere UDP. Sin la NAT Transversal, establecer una conexión P2P no sería posible. UDP no provee una &amp;ldquo;entrega garantizada&amp;rdquo; como TCP, así que WebRTC lo hace a nivel de usuario.
Mira Conexión para más información.
¿Qué tantos DataChannel puedo tener? 65534 canales como identificador de flujo tiene 16 bits. Puedes cerrar y abrir uno nuevo cuando quieras ¿WebRTC tiene limites en el ancho de banda?</description></item><item><title>Glosario</title><link>https://webrtcforthecurious.com/es/docs/12-glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/12-glossary/</guid><description>Glosario # ACK: Reconocimiento (Acknowledgment) AVP: Perfil de Audio y Video (Audio and Video profile) B-Frame: Cuadro Predicho Bidireccional. Una imagen parcial, es una modificación de imágenes anteriores y futuras. DCEP: Protocolo de Establecimiento de Canal de Datos definido en RFC 8832 DeMux: Desmultiplexor (Demultiplexer) DLSR: Retardo desde el último informe del remitente (Delay since last sender report) DTLS: Seguridad de la Capa de Transporte de Datagramas definido en RFC 6347 E2E: Extremo a Extremo (End-to-End) FEC: Corrección de Errores hacia Adelante FIR: Solicitud de Cuadro INTRA Completo G.</description></item><item><title>Referencia</title><link>https://webrtcforthecurious.com/es/docs/13-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/es/docs/13-reference/</guid><description>Referencia # WebRTC(W3C) # WebRTC 1.0: Real-Time Communication Between Browsers [26 January 2021] (Estado: Recommendation) Web Real-Time Communications Working Group - Publications WebRTC(RFC) # RFC8825: Overview: Real-Time Protocols for Browser-Based Applications H. Alvestrand [January 2021] (Estado: PROPOSED STANDARD) RFC8826: Security Considerations for WebRTC E. Rescorla [January 2021] (Estado: PROPOSED STANDARD) RFC8836: Congestion Control Requirements for Interactive Real-Time Media R. Jesup, Z. Sarker [January 2021] (Estado: INFORMATIONAL) RFC8854: WebRTC Forward Error Correction Requirements J.</description></item></channel></rss>