<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Giriş on WebRTC Meraklıları İçin</title><link>https://webrtcforthecurious.com/tr/</link><description>Recent content in Giriş on WebRTC Meraklıları İçin</description><generator>Hugo</generator><language>tr</language><atom:link href="https://webrtcforthecurious.com/tr/index.xml" rel="self" type="application/rss+xml"/><item><title>Ne, Neden ve Nasıl</title><link>https://webrtcforthecurious.com/tr/docs/01-what-why-and-how/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/01-what-why-and-how/</guid><description>Ne, Neden ve Nasıl # WebRTC Nedir? # WebRTC, Web Real-Time Communication&amp;rsquo;ın kısaltması olarak hem bir API hem de bir Protokoldür. WebRTC protokolü, iki WebRTC aracısının çift yönlü güvenli gerçek zamanlı iletişim müzakere etmesi için bir dizi kuraldan oluşur. WebRTC API&amp;rsquo;si ise geliştiricilerin WebRTC protokolünü kullanmasına olanak tanır. WebRTC API&amp;rsquo;si yalnızca JavaScript için belirtilmiştir.
Benzer bir ilişki HTTP ve Fetch API arasındaki ilişki olacaktır. WebRTC protokolü HTTP olurken, WebRTC API&amp;rsquo;si Fetch API olur.</description></item><item><title>Sinyalleşme</title><link>https://webrtcforthecurious.com/tr/docs/02-signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/02-signaling/</guid><description>Sinyalleşme # WebRTC Sinyalleşme Nedir? # Bir WebRTC ajanı oluşturduğunuzda, diğer eş hakkında hiçbir şey bilmez. Kiminle bağlantı kuracağını veya ne göndereceklerini bilmez! Sinyalleşme, bir çağrıyı mümkün kılan ilk önyüklemedir. Bu değerler değiş tokuş edildikten sonra, WebRTC ajanları doğrudan birbirleriyle iletişim kurabilir.
Sinyalleşme mesajları sadece metindir. WebRTC ajanları bunların nasıl taşındığını umursamaz. Genellikle Websocket&amp;rsquo;ler aracılığıyla paylaşılırlar, ancak bu bir gereklilik değildir.
WebRTC sinyalleşme nasıl çalışır? # WebRTC, Oturum Tanımlama Protokolü adlı mevcut bir protokol kullanır.</description></item><item><title>Bağlanma</title><link>https://webrtcforthecurious.com/tr/docs/03-connecting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/03-connecting/</guid><description>Bağlanma # WebRTC neden bağlanma için özel bir alt sisteme ihtiyaç duyar? # Bugün dağıtılan çoğu uygulama istemci/sunucu bağlantıları kurar. Bir istemci/sunucu bağlantısı, sunucunun kararlı, iyi bilinen bir aktarım adresine sahip olmasını gerektirir. Bir istemci sunucuyla iletişime geçer ve sunucu yanıt verir.
WebRTC bir istemci/sunucu modeli kullanmaz, eşten-eşe (P2P) bağlantılar kurar. P2P bağlantısında, bağlantı oluşturma görevi her iki eşe eşit olarak dağıtılır. Bunun nedeni, WebRTC&amp;rsquo;de bir aktarım adresinin (IP ve port) varsayılamayacak olması ve hatta oturum sırasında değişebilmesidir.</description></item><item><title>Güvenlik</title><link>https://webrtcforthecurious.com/tr/docs/04-securing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/04-securing/</guid><description>Güvenlik # WebRTC hangi güvenlik özelliklerine sahip? # Her WebRTC bağlantısı kimlik doğrulamalı ve şifrelidir. Üçüncü bir tarafın gönderdiğiniz şeyleri göremeyeceğinden veya sahte mesajlar ekleyemeyeceğinden emin olabilirsiniz. Ayrıca Oturum Tanımını oluşturan WebRTC Ajanının iletişim kurduğunuz kişi olduğundan da emin olabilirsiniz.
Bu mesajlarla kimsenin oynamaması çok önemlidir. Üçüncü bir tarafın geçiş sırasında Oturum Tanımını okuması sorun değil. Ancak, WebRTC&amp;rsquo;nin değiştirilmesine karşı koruması yoktur. Bir saldırgan, ICE Adaylarını değiştirip Sertifika Parmak İzini güncelleyerek size ortadaki adam saldırısı gerçekleştirebilir.</description></item><item><title>Gerçek Zamanlı Ağ İletişimi</title><link>https://webrtcforthecurious.com/tr/docs/05-real-time-networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/05-real-time-networking/</guid><description>Gerçek Zamanlı Ağ İletişimi # Gerçek zamanlı iletişimde ağ iletişimi neden bu kadar önemli? # Ağlar gerçek zamanlı iletişimde sınırlayıcı faktördür. İdeal bir dünyada sınırsız bant genişliğine sahip olurduk ve paketler anında ulaşırdı. Ancak durum böyle değil. Ağlar sınırlıdır ve koşullar her an değişebilir. Ağ koşullarını ölçmek ve gözlemlemek de zor bir problemdir. Donanım, yazılım ve bunların konfigürasyonuna bağlı olarak farklı davranışlar alabilirsiniz.
Gerçek zamanlı iletişim ayrıca diğer çoğu alanda bulunmayan bir problem yaratır.</description></item><item><title>Medya İletişimi</title><link>https://webrtcforthecurious.com/tr/docs/06-media-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/06-media-communication/</guid><description>Medya İletişimi # WebRTC&amp;rsquo;nin medya iletişiminden ne elde ederim? # WebRTC size sınırsız miktarda ses ve video akışı gönderip almanıza izin verir. Bu akışları bir çağrı sırasında istediğiniz zaman ekleyip çıkarabilirsiniz. Bu akışların hepsi bağımsız olabilir veya birlikte paketlenmiş olabilir! Masaüstünüzün video beslemesini gönderebilir ve ardından web kameranızdan ses ve video ekleyebilirsiniz.
WebRTC protokolü codec agnostiktir. Alttaki aktarım her şeyi destekler, henüz var olmayan şeyleri bile! Ancak, iletişim kurduğunuz WebRTC Ajanı bunu kabul etmek için gerekli araçlara sahip olmayabilir.</description></item><item><title>Veri İletişimi</title><link>https://webrtcforthecurious.com/tr/docs/07-data-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/07-data-communication/</guid><description>Veri İletişimi # WebRTC&amp;rsquo;nin veri iletişiminden ne elde ederim? # WebRTC, veri iletişimi için veri kanalları sağlar. İki eş arasında 65.534 veri kanalı açabilirsiniz. Veri kanalı datagram tabanlıdır ve her birinin kendi dayanıklılık ayarları vardır. Varsayılan olarak, her veri kanalının garantili sıralı teslimatı vardır.
WebRTC&amp;rsquo;ye medya geçmişinden yaklaşıyorsanız veri kanalları savurgan görünebilir. HTTP veya WebSocket&amp;rsquo;leri kullanabileceğim zaman neden bu alt sisteme ihtiyacım var?
Veri kanallarının gerçek gücü, onları sırasız/kayıplı teslimatla UDP gibi davranacak şekilde yapılandırabilmenizdir.</description></item><item><title>Uygulamalı WebRTC</title><link>https://webrtcforthecurious.com/tr/docs/08-applied-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/08-applied-webrtc/</guid><description>Uygulamalı WebRTC # Artık WebRTC&amp;rsquo;nin nasıl çalıştığını bildiğinize göre, onunla geliştirme zamanı! Bu bölüm insanların WebRTC ile ne geliştirdiğini ve nasıl geliştirdiğini araştırıyor. WebRTC ile olan tüm ilginç gelişmeleri öğreneceksiniz. WebRTC&amp;rsquo;nin gücü bir bedelle gelir. Üretim kalitesi WebRTC hizmetleri geliştirmek zorludur. Bu bölüm size bu zorlukları karşılaşmadan önce açıklamaya çalışacaktır.
Kullanım Durumuna Göre # Birçoğu WebRTC&amp;rsquo;nin sadece web tarayıcısında konferans için bir teknoloji olduğunu düşünür. Ama çok daha fazlasıdır! WebRTC geniş bir uygulama yelpazesinde kullanılır.</description></item><item><title>Hata Ayıklama</title><link>https://webrtcforthecurious.com/tr/docs/09-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/09-debugging/</guid><description>Hata Ayıklama # WebRTC hata ayıklama göz korkutucu bir görev olabilir. Çok sayıda hareketli parça vardır ve hepsi bağımsız olarak bozulabilir. Dikkatli olmazsanız, yanlış şeylere bakarak haftalar kaybedebilirsiniz. Sonunda bozuk olan kısmı bulduğunuzda, nedenini anlamak için biraz öğrenmeniz gerekecek.
Bu bölüm sizi WebRTC hata ayıklama zihniyetine sokacaktır. Size problemi nasıl parçalara ayıracağınızı gösterecektir. Problemi öğrendikten sonra, popüler hata ayıklama araçlarının hızlı bir turunu vereceğiz.
Problemi İzole Edin # Hata ayıklama yaparken, sorunun nereden geldiğini izole etmeniz gerekir.</description></item><item><title>Tarihçe</title><link>https://webrtcforthecurious.com/tr/docs/10-history-of-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/10-history-of-webrtc/</guid><description>Tarihçe # WebRTC öğrenirken geliştiriciler genellikle karmaşıklık nedeniyle hayal kırıklığı yaşarlar. Mevcut projelerine alakasız WebRTC özelliklerini görür ve WebRTC&amp;rsquo;nin daha basit olmasını dilerler. Sorun herkesin farklı bir kullanım durumu setine sahip olmasıdır. Gerçek zamanlı iletişimin zengin bir geçmişi vardır ve birçok farklı insan birçok farklı şey inşa eder.
Bu bölüm WebRTC&amp;rsquo;yi oluşturan protokollerin yazarlarıyla yapılan röportajları içerir. Her protokolü inşa ederken yapılan tasarımlara dair içgörü verir ve WebRTC&amp;rsquo;nin kendisi hakkında bir röportajla biter.</description></item><item><title>SSS</title><link>https://webrtcforthecurious.com/tr/docs/11-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/11-faq/</guid><description>SSS (Sıkça Sorulan Sorular) # WebRTC neden UDP kullanıyor? NAT Geçişi UDP gerektirir. NAT Geçişi olmadan P2P bağlantı kurmak mümkün olmazdı. UDP, TCP gibi &amp;ldquo;garantili teslimat&amp;rdquo; sağlamaz, bu yüzden WebRTC bunu kullanıcı seviyesinde sağlar.
Daha fazla bilgi için Bağlanma bölümüne bakın.
Kaç tane DataChannel&amp;rsquo;ım olabilir? Akış tanımlayıcısı 16 bit olduğu için 65534 kanal. İstediğiniz zaman kapatıp yeni bir tane açabilirsiniz. WebRTC bant genişliği sınırları koyuyor mu? Hem DataChannel&amp;rsquo;lar hem de RTP tıkanıklık kontrolü kullanır.</description></item><item><title>Sözlük</title><link>https://webrtcforthecurious.com/tr/docs/12-glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/12-glossary/</guid><description>Sözlük # ACK: Onay (Acknowledgment) AVP: Ses ve Video profili (Audio and Video profile) B-Frame: Çift Yönlü Tahminli Çerçeve. Kısmi bir resim, önceki ve gelecekteki resimlerin modifikasyonudur. DCEP: Veri Kanalı Kurma Protokolü RFC 8832&amp;lsquo;de tanımlanmıştır DeMux: Çoklayıcı çözücü (Demultiplexer) DLSR: Son gönderen raporundan beri gecikme (Delay since last sender report) DTLS: Datagram Aktarım Katmanı Güvenliği RFC 6347&amp;lsquo;de tanımlanmıştır E2E: Uçtan Uca (End-to-End) FEC: İleri Hata Düzeltme FIR: Tam INTRA-çerçeve İsteği G.</description></item><item><title>Referans</title><link>https://webrtcforthecurious.com/tr/docs/13-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/tr/docs/13-reference/</guid><description>Referans # WebRTC(W3C) # WebRTC 1.0: Tarayıcılar Arası Gerçek Zamanlı İletişim [26 Ocak 2021] (Durum: Öneri) Web Gerçek Zamanlı İletişim Çalışma Grubu - Yayınlar WebRTC(RFC) # RFC8825: Genel Bakış: Tarayıcı Tabanlı Uygulamalar için Gerçek Zamanlı Protokoller H. Alvestrand [Ocak 2021] (Durum: ÖNERİLEN STANDART) RFC8826: WebRTC için Güvenlik Değerlendirmeleri E. Rescorla [Ocak 2021] (Durum: ÖNERİLEN STANDART) RFC8836: Etkileşimli Gerçek Zamanlı Medya için Tıkanıklık Kontrol Gereksinimleri R. Jesup, Z. Sarker [Ocak 2021] (Durum: BİLGİLENDİRME) RFC8854: WebRTC İleri Hata Düzeltme Gereksinimleri J.</description></item></channel></rss>